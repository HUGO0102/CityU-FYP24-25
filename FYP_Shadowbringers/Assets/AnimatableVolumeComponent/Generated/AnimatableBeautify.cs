// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Rendering;

namespace TsukimiNeko.AnimatableVolumeComponent
{
    [AnimatableOf(typeof(BeautifyHDRP.Beautify))]
    [DisallowMultipleComponent]
    public class AnimatableBeautify : AnimatableVolumeComponentBase
    {
        public override Type TargetType { get; } = typeof(BeautifyHDRP.Beautify);

        public bool override_intensity;
        public System.Single intensity;
        public bool override_compareMode;
        public System.Boolean compareMode;
        public bool override_compareLineAngle;
        public System.Single compareLineAngle;
        public bool override_compareLineWidth;
        public System.Single compareLineWidth;
        public bool override_compareSameSide;
        public System.Boolean compareSameSide;
        public bool override_comparePanning;
        public System.Single comparePanning;
        public bool override_sharpen;
        public System.Single sharpen;
        public bool override_sharpenMinDepth;
        public System.Single sharpenMinDepth;
        public bool override_sharpenMaxDepth;
        public System.Single sharpenMaxDepth;
        public bool override_sharpenMinMaxDepthFallOff;
        public System.Single sharpenMinMaxDepthFallOff;
        public bool override_sharpenDepthThreshold;
        public System.Single sharpenDepthThreshold;
        public bool override_sharpenRelaxation;
        public System.Single sharpenRelaxation;
        public bool override_sharpenClamp;
        public System.Single sharpenClamp;
        public bool override_sharpenMotionSensibility;
        public System.Single sharpenMotionSensibility;
        public bool override_ditherStrength;
        public System.Single ditherStrength;
        public bool override_tonemap;
        public BeautifyHDRP.Beautify.TonemapOperator tonemap;
        public bool override_tonemapExposure;
        public System.Single tonemapExposure;
        public bool override_saturate;
        public System.Single saturate;
        public bool override_brightness;
        public System.Single brightness;
        public bool override_contrast;
        public System.Single contrast;
        public bool override_hardlightIntensity;
        public System.Single hardlightIntensity;
        public bool override_hardlightBlend;
        public System.Single hardlightBlend;
        public bool override_daltonize;
        public System.Single daltonize;
        public bool override_lut;
        public UnityEngine.Texture lut;
        public bool override_lutIntensity;
        public System.Single lutIntensity;
        public bool override_depthOfField;
        public System.Boolean depthOfField;
        public bool override_depthOfFieldFocusMode;
        public BeautifyHDRP.Beautify.DoFFocusMode depthOfFieldFocusMode;
        public bool override_depthOfFieldAutofocusMinDistance;
        public System.Single depthOfFieldAutofocusMinDistance;
        public bool override_depthOfFieldAutofocusMaxDistance;
        public System.Single depthOfFieldAutofocusMaxDistance;
        public bool override_depthOfFieldAutofocusViewportPoint;
        public UnityEngine.Vector2 depthOfFieldAutofocusViewportPoint;
        public bool override_depthOfFieldAutofocusDistanceShift;
        public System.Single depthOfFieldAutofocusDistanceShift;
        public bool override_depthOfFieldAutofocusLayerMask;
        public UnityEngine.LayerMask depthOfFieldAutofocusLayerMask;
        public bool override_depthOfFieldDistance;
        public System.Single depthOfFieldDistance;
        public bool override_depthOfFieldCameraSettings;
        public BeautifyHDRP.Beautify.DoFCameraSettings depthOfFieldCameraSettings;
        public bool override_depthOfFieldFocalLength;
        public System.Single depthOfFieldFocalLength;
        public bool override_depthOfFieldAperture;
        public System.Single depthOfFieldAperture;
        public bool override_depthOfFieldFocalLengthReal;
        public System.Single depthOfFieldFocalLengthReal;
        public bool override_depthOfFieldFStop;
        public System.Single depthOfFieldFStop;
        public bool override_depthOfFieldImageSensorHeight;
        public System.Single depthOfFieldImageSensorHeight;
        public bool override_depthOfFieldFocusSpeed;
        public System.Single depthOfFieldFocusSpeed;
        public bool override_depthOfFieldForegroundBlur;
        public System.Boolean depthOfFieldForegroundBlur;
        public bool override_depthOfFieldForegroundBlurHQ;
        public System.Boolean depthOfFieldForegroundBlurHQ;
        public bool override_depthOfFieldForegroundBlurHQSpread;
        public System.Single depthOfFieldForegroundBlurHQSpread;
        public bool override_depthOfFieldForegroundDistance;
        public System.Single depthOfFieldForegroundDistance;
        public bool override_depthOfFieldBokeh;
        public System.Boolean depthOfFieldBokeh;
        public bool override_depthOfFieldBokehThreshold;
        public System.Single depthOfFieldBokehThreshold;
        public bool override_depthOfFieldBokehIntensity;
        public System.Single depthOfFieldBokehIntensity;
        public bool override_depthOfFieldBokehComposition;
        public BeautifyHDRP.Beautify.DoFBokehComposition depthOfFieldBokehComposition;
        public bool override_depthOfFieldDownsampling;
        public System.Int32 depthOfFieldDownsampling;
        public bool override_depthOfFieldMaxSamples;
        public System.Int32 depthOfFieldMaxSamples;
        public bool override_depthOfFieldMaxBrightness;
        public System.Single depthOfFieldMaxBrightness;
        public bool override_depthOfFieldMaxDistance;
        public System.Single depthOfFieldMaxDistance;
        public bool override_vignettingOuterRing;
        public System.Single vignettingOuterRing;
        public bool override_vignettingInnerRing;
        public System.Single vignettingInnerRing;
        public bool override_vignettingFade;
        public System.Single vignettingFade;
        public bool override_vignettingCircularShape;
        public System.Boolean vignettingCircularShape;
        public bool override_vignettingAspectRatio;
        public System.Single vignettingAspectRatio;
        public bool override_vignettingBlink;
        public System.Single vignettingBlink;
        public bool override_vignettingBlinkStyle;
        public BeautifyHDRP.Beautify.BlinkStyle vignettingBlinkStyle;
        public bool override_vignettingCenter;
        public UnityEngine.Vector2 vignettingCenter;
        public bool override_vignettingColor;
        public UnityEngine.Color vignettingColor;
        public bool override_vignettingMask;
        public UnityEngine.Texture vignettingMask;
        public bool override_pixelateSize;
        public System.Int32 pixelateSize;
        public bool override_frostIntensity;
        public System.Single frostIntensity;
        public bool override_frostSpread;
        public System.Single frostSpread;
        public bool override_frostDistortion;
        public System.Single frostDistortion;
        public bool override_frostTexture;
        public UnityEngine.Texture frostTexture;
        public bool override_frostDistortTexture;
        public UnityEngine.Texture frostDistortTexture;
        public bool override_frostTintColor;
        public UnityEngine.Color frostTintColor;
        public bool override_blurIntensity;
        public System.Single blurIntensity;


        private void WriteToVolumeComponent(BeautifyHDRP.Beautify volumeComponent)
        {
            if (!volumeComponent) return;

            volumeComponent.active = active;
            volumeComponent.intensity.overrideState = override_intensity;
            volumeComponent.intensity.value = intensity;
            volumeComponent.compareMode.overrideState = override_compareMode;
            volumeComponent.compareMode.value = compareMode;
            volumeComponent.compareLineAngle.overrideState = override_compareLineAngle;
            volumeComponent.compareLineAngle.value = compareLineAngle;
            volumeComponent.compareLineWidth.overrideState = override_compareLineWidth;
            volumeComponent.compareLineWidth.value = compareLineWidth;
            volumeComponent.compareSameSide.overrideState = override_compareSameSide;
            volumeComponent.compareSameSide.value = compareSameSide;
            volumeComponent.comparePanning.overrideState = override_comparePanning;
            volumeComponent.comparePanning.value = comparePanning;
            volumeComponent.sharpen.overrideState = override_sharpen;
            volumeComponent.sharpen.value = sharpen;
            volumeComponent.sharpenMinDepth.overrideState = override_sharpenMinDepth;
            volumeComponent.sharpenMinDepth.value = sharpenMinDepth;
            volumeComponent.sharpenMaxDepth.overrideState = override_sharpenMaxDepth;
            volumeComponent.sharpenMaxDepth.value = sharpenMaxDepth;
            volumeComponent.sharpenMinMaxDepthFallOff.overrideState = override_sharpenMinMaxDepthFallOff;
            volumeComponent.sharpenMinMaxDepthFallOff.value = sharpenMinMaxDepthFallOff;
            volumeComponent.sharpenDepthThreshold.overrideState = override_sharpenDepthThreshold;
            volumeComponent.sharpenDepthThreshold.value = sharpenDepthThreshold;
            volumeComponent.sharpenRelaxation.overrideState = override_sharpenRelaxation;
            volumeComponent.sharpenRelaxation.value = sharpenRelaxation;
            volumeComponent.sharpenClamp.overrideState = override_sharpenClamp;
            volumeComponent.sharpenClamp.value = sharpenClamp;
            volumeComponent.sharpenMotionSensibility.overrideState = override_sharpenMotionSensibility;
            volumeComponent.sharpenMotionSensibility.value = sharpenMotionSensibility;
            volumeComponent.ditherStrength.overrideState = override_ditherStrength;
            volumeComponent.ditherStrength.value = ditherStrength;
            volumeComponent.tonemap.overrideState = override_tonemap;
            volumeComponent.tonemap.value = tonemap;
            volumeComponent.tonemapExposure.overrideState = override_tonemapExposure;
            volumeComponent.tonemapExposure.value = tonemapExposure;
            volumeComponent.saturate.overrideState = override_saturate;
            volumeComponent.saturate.value = saturate;
            volumeComponent.brightness.overrideState = override_brightness;
            volumeComponent.brightness.value = brightness;
            volumeComponent.contrast.overrideState = override_contrast;
            volumeComponent.contrast.value = contrast;
            volumeComponent.hardlightIntensity.overrideState = override_hardlightIntensity;
            volumeComponent.hardlightIntensity.value = hardlightIntensity;
            volumeComponent.hardlightBlend.overrideState = override_hardlightBlend;
            volumeComponent.hardlightBlend.value = hardlightBlend;
            volumeComponent.daltonize.overrideState = override_daltonize;
            volumeComponent.daltonize.value = daltonize;
            volumeComponent.lut.overrideState = override_lut;
            volumeComponent.lut.value = lut;
            volumeComponent.lutIntensity.overrideState = override_lutIntensity;
            volumeComponent.lutIntensity.value = lutIntensity;
            volumeComponent.depthOfField.overrideState = override_depthOfField;
            volumeComponent.depthOfField.value = depthOfField;
            volumeComponent.depthOfFieldFocusMode.overrideState = override_depthOfFieldFocusMode;
            volumeComponent.depthOfFieldFocusMode.value = depthOfFieldFocusMode;
            volumeComponent.depthOfFieldAutofocusMinDistance.overrideState = override_depthOfFieldAutofocusMinDistance;
            volumeComponent.depthOfFieldAutofocusMinDistance.value = depthOfFieldAutofocusMinDistance;
            volumeComponent.depthOfFieldAutofocusMaxDistance.overrideState = override_depthOfFieldAutofocusMaxDistance;
            volumeComponent.depthOfFieldAutofocusMaxDistance.value = depthOfFieldAutofocusMaxDistance;
            volumeComponent.depthOfFieldAutofocusViewportPoint.overrideState = override_depthOfFieldAutofocusViewportPoint;
            volumeComponent.depthOfFieldAutofocusViewportPoint.value = depthOfFieldAutofocusViewportPoint;
            volumeComponent.depthOfFieldAutofocusDistanceShift.overrideState = override_depthOfFieldAutofocusDistanceShift;
            volumeComponent.depthOfFieldAutofocusDistanceShift.value = depthOfFieldAutofocusDistanceShift;
            volumeComponent.depthOfFieldAutofocusLayerMask.overrideState = override_depthOfFieldAutofocusLayerMask;
            volumeComponent.depthOfFieldAutofocusLayerMask.value = depthOfFieldAutofocusLayerMask;
            volumeComponent.depthOfFieldDistance.overrideState = override_depthOfFieldDistance;
            volumeComponent.depthOfFieldDistance.value = depthOfFieldDistance;
            volumeComponent.depthOfFieldCameraSettings.overrideState = override_depthOfFieldCameraSettings;
            volumeComponent.depthOfFieldCameraSettings.value = depthOfFieldCameraSettings;
            volumeComponent.depthOfFieldFocalLength.overrideState = override_depthOfFieldFocalLength;
            volumeComponent.depthOfFieldFocalLength.value = depthOfFieldFocalLength;
            volumeComponent.depthOfFieldAperture.overrideState = override_depthOfFieldAperture;
            volumeComponent.depthOfFieldAperture.value = depthOfFieldAperture;
            volumeComponent.depthOfFieldFocalLengthReal.overrideState = override_depthOfFieldFocalLengthReal;
            volumeComponent.depthOfFieldFocalLengthReal.value = depthOfFieldFocalLengthReal;
            volumeComponent.depthOfFieldFStop.overrideState = override_depthOfFieldFStop;
            volumeComponent.depthOfFieldFStop.value = depthOfFieldFStop;
            volumeComponent.depthOfFieldImageSensorHeight.overrideState = override_depthOfFieldImageSensorHeight;
            volumeComponent.depthOfFieldImageSensorHeight.value = depthOfFieldImageSensorHeight;
            volumeComponent.depthOfFieldFocusSpeed.overrideState = override_depthOfFieldFocusSpeed;
            volumeComponent.depthOfFieldFocusSpeed.value = depthOfFieldFocusSpeed;
            volumeComponent.depthOfFieldForegroundBlur.overrideState = override_depthOfFieldForegroundBlur;
            volumeComponent.depthOfFieldForegroundBlur.value = depthOfFieldForegroundBlur;
            volumeComponent.depthOfFieldForegroundBlurHQ.overrideState = override_depthOfFieldForegroundBlurHQ;
            volumeComponent.depthOfFieldForegroundBlurHQ.value = depthOfFieldForegroundBlurHQ;
            volumeComponent.depthOfFieldForegroundBlurHQSpread.overrideState = override_depthOfFieldForegroundBlurHQSpread;
            volumeComponent.depthOfFieldForegroundBlurHQSpread.value = depthOfFieldForegroundBlurHQSpread;
            volumeComponent.depthOfFieldForegroundDistance.overrideState = override_depthOfFieldForegroundDistance;
            volumeComponent.depthOfFieldForegroundDistance.value = depthOfFieldForegroundDistance;
            volumeComponent.depthOfFieldBokeh.overrideState = override_depthOfFieldBokeh;
            volumeComponent.depthOfFieldBokeh.value = depthOfFieldBokeh;
            volumeComponent.depthOfFieldBokehThreshold.overrideState = override_depthOfFieldBokehThreshold;
            volumeComponent.depthOfFieldBokehThreshold.value = depthOfFieldBokehThreshold;
            volumeComponent.depthOfFieldBokehIntensity.overrideState = override_depthOfFieldBokehIntensity;
            volumeComponent.depthOfFieldBokehIntensity.value = depthOfFieldBokehIntensity;
            volumeComponent.depthOfFieldBokehComposition.overrideState = override_depthOfFieldBokehComposition;
            volumeComponent.depthOfFieldBokehComposition.value = depthOfFieldBokehComposition;
            volumeComponent.depthOfFieldDownsampling.overrideState = override_depthOfFieldDownsampling;
            volumeComponent.depthOfFieldDownsampling.value = depthOfFieldDownsampling;
            volumeComponent.depthOfFieldMaxSamples.overrideState = override_depthOfFieldMaxSamples;
            volumeComponent.depthOfFieldMaxSamples.value = depthOfFieldMaxSamples;
            volumeComponent.depthOfFieldMaxBrightness.overrideState = override_depthOfFieldMaxBrightness;
            volumeComponent.depthOfFieldMaxBrightness.value = depthOfFieldMaxBrightness;
            volumeComponent.depthOfFieldMaxDistance.overrideState = override_depthOfFieldMaxDistance;
            volumeComponent.depthOfFieldMaxDistance.value = depthOfFieldMaxDistance;
            volumeComponent.vignettingOuterRing.overrideState = override_vignettingOuterRing;
            volumeComponent.vignettingOuterRing.value = vignettingOuterRing;
            volumeComponent.vignettingInnerRing.overrideState = override_vignettingInnerRing;
            volumeComponent.vignettingInnerRing.value = vignettingInnerRing;
            volumeComponent.vignettingFade.overrideState = override_vignettingFade;
            volumeComponent.vignettingFade.value = vignettingFade;
            volumeComponent.vignettingCircularShape.overrideState = override_vignettingCircularShape;
            volumeComponent.vignettingCircularShape.value = vignettingCircularShape;
            volumeComponent.vignettingAspectRatio.overrideState = override_vignettingAspectRatio;
            volumeComponent.vignettingAspectRatio.value = vignettingAspectRatio;
            volumeComponent.vignettingBlink.overrideState = override_vignettingBlink;
            volumeComponent.vignettingBlink.value = vignettingBlink;
            volumeComponent.vignettingBlinkStyle.overrideState = override_vignettingBlinkStyle;
            volumeComponent.vignettingBlinkStyle.value = vignettingBlinkStyle;
            volumeComponent.vignettingCenter.overrideState = override_vignettingCenter;
            volumeComponent.vignettingCenter.value = vignettingCenter;
            volumeComponent.vignettingColor.overrideState = override_vignettingColor;
            volumeComponent.vignettingColor.value = vignettingColor;
            volumeComponent.vignettingMask.overrideState = override_vignettingMask;
            volumeComponent.vignettingMask.value = vignettingMask;
            volumeComponent.pixelateSize.overrideState = override_pixelateSize;
            volumeComponent.pixelateSize.value = pixelateSize;
            volumeComponent.frostIntensity.overrideState = override_frostIntensity;
            volumeComponent.frostIntensity.value = frostIntensity;
            volumeComponent.frostSpread.overrideState = override_frostSpread;
            volumeComponent.frostSpread.value = frostSpread;
            volumeComponent.frostDistortion.overrideState = override_frostDistortion;
            volumeComponent.frostDistortion.value = frostDistortion;
            volumeComponent.frostTexture.overrideState = override_frostTexture;
            volumeComponent.frostTexture.value = frostTexture;
            volumeComponent.frostDistortTexture.overrideState = override_frostDistortTexture;
            volumeComponent.frostDistortTexture.value = frostDistortTexture;
            volumeComponent.frostTintColor.overrideState = override_frostTintColor;
            volumeComponent.frostTintColor.value = frostTintColor;
            volumeComponent.blurIntensity.overrideState = override_blurIntensity;
            volumeComponent.blurIntensity.value = blurIntensity;

        }

        private void ReadFromVolumeComponent(BeautifyHDRP.Beautify volumeComponent)
        {
            if (!volumeComponent) return;

            active = volumeComponent.active;
            override_intensity = volumeComponent.intensity.overrideState;
            intensity = volumeComponent.intensity.value;
            override_compareMode = volumeComponent.compareMode.overrideState;
            compareMode = volumeComponent.compareMode.value;
            override_compareLineAngle = volumeComponent.compareLineAngle.overrideState;
            compareLineAngle = volumeComponent.compareLineAngle.value;
            override_compareLineWidth = volumeComponent.compareLineWidth.overrideState;
            compareLineWidth = volumeComponent.compareLineWidth.value;
            override_compareSameSide = volumeComponent.compareSameSide.overrideState;
            compareSameSide = volumeComponent.compareSameSide.value;
            override_comparePanning = volumeComponent.comparePanning.overrideState;
            comparePanning = volumeComponent.comparePanning.value;
            override_sharpen = volumeComponent.sharpen.overrideState;
            sharpen = volumeComponent.sharpen.value;
            override_sharpenMinDepth = volumeComponent.sharpenMinDepth.overrideState;
            sharpenMinDepth = volumeComponent.sharpenMinDepth.value;
            override_sharpenMaxDepth = volumeComponent.sharpenMaxDepth.overrideState;
            sharpenMaxDepth = volumeComponent.sharpenMaxDepth.value;
            override_sharpenMinMaxDepthFallOff = volumeComponent.sharpenMinMaxDepthFallOff.overrideState;
            sharpenMinMaxDepthFallOff = volumeComponent.sharpenMinMaxDepthFallOff.value;
            override_sharpenDepthThreshold = volumeComponent.sharpenDepthThreshold.overrideState;
            sharpenDepthThreshold = volumeComponent.sharpenDepthThreshold.value;
            override_sharpenRelaxation = volumeComponent.sharpenRelaxation.overrideState;
            sharpenRelaxation = volumeComponent.sharpenRelaxation.value;
            override_sharpenClamp = volumeComponent.sharpenClamp.overrideState;
            sharpenClamp = volumeComponent.sharpenClamp.value;
            override_sharpenMotionSensibility = volumeComponent.sharpenMotionSensibility.overrideState;
            sharpenMotionSensibility = volumeComponent.sharpenMotionSensibility.value;
            override_ditherStrength = volumeComponent.ditherStrength.overrideState;
            ditherStrength = volumeComponent.ditherStrength.value;
            override_tonemap = volumeComponent.tonemap.overrideState;
            tonemap = volumeComponent.tonemap.value;
            override_tonemapExposure = volumeComponent.tonemapExposure.overrideState;
            tonemapExposure = volumeComponent.tonemapExposure.value;
            override_saturate = volumeComponent.saturate.overrideState;
            saturate = volumeComponent.saturate.value;
            override_brightness = volumeComponent.brightness.overrideState;
            brightness = volumeComponent.brightness.value;
            override_contrast = volumeComponent.contrast.overrideState;
            contrast = volumeComponent.contrast.value;
            override_hardlightIntensity = volumeComponent.hardlightIntensity.overrideState;
            hardlightIntensity = volumeComponent.hardlightIntensity.value;
            override_hardlightBlend = volumeComponent.hardlightBlend.overrideState;
            hardlightBlend = volumeComponent.hardlightBlend.value;
            override_daltonize = volumeComponent.daltonize.overrideState;
            daltonize = volumeComponent.daltonize.value;
            override_lut = volumeComponent.lut.overrideState;
            lut = volumeComponent.lut.value;
            override_lutIntensity = volumeComponent.lutIntensity.overrideState;
            lutIntensity = volumeComponent.lutIntensity.value;
            override_depthOfField = volumeComponent.depthOfField.overrideState;
            depthOfField = volumeComponent.depthOfField.value;
            override_depthOfFieldFocusMode = volumeComponent.depthOfFieldFocusMode.overrideState;
            depthOfFieldFocusMode = volumeComponent.depthOfFieldFocusMode.value;
            override_depthOfFieldAutofocusMinDistance = volumeComponent.depthOfFieldAutofocusMinDistance.overrideState;
            depthOfFieldAutofocusMinDistance = volumeComponent.depthOfFieldAutofocusMinDistance.value;
            override_depthOfFieldAutofocusMaxDistance = volumeComponent.depthOfFieldAutofocusMaxDistance.overrideState;
            depthOfFieldAutofocusMaxDistance = volumeComponent.depthOfFieldAutofocusMaxDistance.value;
            override_depthOfFieldAutofocusViewportPoint = volumeComponent.depthOfFieldAutofocusViewportPoint.overrideState;
            depthOfFieldAutofocusViewportPoint = volumeComponent.depthOfFieldAutofocusViewportPoint.value;
            override_depthOfFieldAutofocusDistanceShift = volumeComponent.depthOfFieldAutofocusDistanceShift.overrideState;
            depthOfFieldAutofocusDistanceShift = volumeComponent.depthOfFieldAutofocusDistanceShift.value;
            override_depthOfFieldAutofocusLayerMask = volumeComponent.depthOfFieldAutofocusLayerMask.overrideState;
            depthOfFieldAutofocusLayerMask = volumeComponent.depthOfFieldAutofocusLayerMask.value;
            override_depthOfFieldDistance = volumeComponent.depthOfFieldDistance.overrideState;
            depthOfFieldDistance = volumeComponent.depthOfFieldDistance.value;
            override_depthOfFieldCameraSettings = volumeComponent.depthOfFieldCameraSettings.overrideState;
            depthOfFieldCameraSettings = volumeComponent.depthOfFieldCameraSettings.value;
            override_depthOfFieldFocalLength = volumeComponent.depthOfFieldFocalLength.overrideState;
            depthOfFieldFocalLength = volumeComponent.depthOfFieldFocalLength.value;
            override_depthOfFieldAperture = volumeComponent.depthOfFieldAperture.overrideState;
            depthOfFieldAperture = volumeComponent.depthOfFieldAperture.value;
            override_depthOfFieldFocalLengthReal = volumeComponent.depthOfFieldFocalLengthReal.overrideState;
            depthOfFieldFocalLengthReal = volumeComponent.depthOfFieldFocalLengthReal.value;
            override_depthOfFieldFStop = volumeComponent.depthOfFieldFStop.overrideState;
            depthOfFieldFStop = volumeComponent.depthOfFieldFStop.value;
            override_depthOfFieldImageSensorHeight = volumeComponent.depthOfFieldImageSensorHeight.overrideState;
            depthOfFieldImageSensorHeight = volumeComponent.depthOfFieldImageSensorHeight.value;
            override_depthOfFieldFocusSpeed = volumeComponent.depthOfFieldFocusSpeed.overrideState;
            depthOfFieldFocusSpeed = volumeComponent.depthOfFieldFocusSpeed.value;
            override_depthOfFieldForegroundBlur = volumeComponent.depthOfFieldForegroundBlur.overrideState;
            depthOfFieldForegroundBlur = volumeComponent.depthOfFieldForegroundBlur.value;
            override_depthOfFieldForegroundBlurHQ = volumeComponent.depthOfFieldForegroundBlurHQ.overrideState;
            depthOfFieldForegroundBlurHQ = volumeComponent.depthOfFieldForegroundBlurHQ.value;
            override_depthOfFieldForegroundBlurHQSpread = volumeComponent.depthOfFieldForegroundBlurHQSpread.overrideState;
            depthOfFieldForegroundBlurHQSpread = volumeComponent.depthOfFieldForegroundBlurHQSpread.value;
            override_depthOfFieldForegroundDistance = volumeComponent.depthOfFieldForegroundDistance.overrideState;
            depthOfFieldForegroundDistance = volumeComponent.depthOfFieldForegroundDistance.value;
            override_depthOfFieldBokeh = volumeComponent.depthOfFieldBokeh.overrideState;
            depthOfFieldBokeh = volumeComponent.depthOfFieldBokeh.value;
            override_depthOfFieldBokehThreshold = volumeComponent.depthOfFieldBokehThreshold.overrideState;
            depthOfFieldBokehThreshold = volumeComponent.depthOfFieldBokehThreshold.value;
            override_depthOfFieldBokehIntensity = volumeComponent.depthOfFieldBokehIntensity.overrideState;
            depthOfFieldBokehIntensity = volumeComponent.depthOfFieldBokehIntensity.value;
            override_depthOfFieldBokehComposition = volumeComponent.depthOfFieldBokehComposition.overrideState;
            depthOfFieldBokehComposition = volumeComponent.depthOfFieldBokehComposition.value;
            override_depthOfFieldDownsampling = volumeComponent.depthOfFieldDownsampling.overrideState;
            depthOfFieldDownsampling = volumeComponent.depthOfFieldDownsampling.value;
            override_depthOfFieldMaxSamples = volumeComponent.depthOfFieldMaxSamples.overrideState;
            depthOfFieldMaxSamples = volumeComponent.depthOfFieldMaxSamples.value;
            override_depthOfFieldMaxBrightness = volumeComponent.depthOfFieldMaxBrightness.overrideState;
            depthOfFieldMaxBrightness = volumeComponent.depthOfFieldMaxBrightness.value;
            override_depthOfFieldMaxDistance = volumeComponent.depthOfFieldMaxDistance.overrideState;
            depthOfFieldMaxDistance = volumeComponent.depthOfFieldMaxDistance.value;
            override_vignettingOuterRing = volumeComponent.vignettingOuterRing.overrideState;
            vignettingOuterRing = volumeComponent.vignettingOuterRing.value;
            override_vignettingInnerRing = volumeComponent.vignettingInnerRing.overrideState;
            vignettingInnerRing = volumeComponent.vignettingInnerRing.value;
            override_vignettingFade = volumeComponent.vignettingFade.overrideState;
            vignettingFade = volumeComponent.vignettingFade.value;
            override_vignettingCircularShape = volumeComponent.vignettingCircularShape.overrideState;
            vignettingCircularShape = volumeComponent.vignettingCircularShape.value;
            override_vignettingAspectRatio = volumeComponent.vignettingAspectRatio.overrideState;
            vignettingAspectRatio = volumeComponent.vignettingAspectRatio.value;
            override_vignettingBlink = volumeComponent.vignettingBlink.overrideState;
            vignettingBlink = volumeComponent.vignettingBlink.value;
            override_vignettingBlinkStyle = volumeComponent.vignettingBlinkStyle.overrideState;
            vignettingBlinkStyle = volumeComponent.vignettingBlinkStyle.value;
            override_vignettingCenter = volumeComponent.vignettingCenter.overrideState;
            vignettingCenter = volumeComponent.vignettingCenter.value;
            override_vignettingColor = volumeComponent.vignettingColor.overrideState;
            vignettingColor = volumeComponent.vignettingColor.value;
            override_vignettingMask = volumeComponent.vignettingMask.overrideState;
            vignettingMask = volumeComponent.vignettingMask.value;
            override_pixelateSize = volumeComponent.pixelateSize.overrideState;
            pixelateSize = volumeComponent.pixelateSize.value;
            override_frostIntensity = volumeComponent.frostIntensity.overrideState;
            frostIntensity = volumeComponent.frostIntensity.value;
            override_frostSpread = volumeComponent.frostSpread.overrideState;
            frostSpread = volumeComponent.frostSpread.value;
            override_frostDistortion = volumeComponent.frostDistortion.overrideState;
            frostDistortion = volumeComponent.frostDistortion.value;
            override_frostTexture = volumeComponent.frostTexture.overrideState;
            frostTexture = volumeComponent.frostTexture.value;
            override_frostDistortTexture = volumeComponent.frostDistortTexture.overrideState;
            frostDistortTexture = volumeComponent.frostDistortTexture.value;
            override_frostTintColor = volumeComponent.frostTintColor.overrideState;
            frostTintColor = volumeComponent.frostTintColor.value;
            override_blurIntensity = volumeComponent.blurIntensity.overrideState;
            blurIntensity = volumeComponent.blurIntensity.value;

        }

        private void Reset()
        {
            var volume = GetComponent<Volume>();
            if (!volume || !volume.sharedProfile || !volume.sharedProfile.TryGet<BeautifyHDRP.Beautify>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }

        public override void WriteToVolumeComponent()
        {
            if (!volumeHelper.TryGet<BeautifyHDRP.Beautify>(out var volumeComponent)) return;

            WriteToVolumeComponent(volumeComponent);
        }

        public override void ReadFromVolumeComponent()
        {
            if (!volumeHelper.TryGet<BeautifyHDRP.Beautify>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }
    }
}
